/*
 * Based on the "ML-in-C" series by Tsoding.
 * Link here: https://www.youtube.com/watch?v=PGSba51aRYU&t=3535s
 * Replicates a single neuron; Comment heavy as this is used for learning purposes
 */
 
#include <iostream>
#include <stdio.h>
#include <stdlib.h>
#include <time.h>

/*
 * non-dependent training data used to determine the outcome
 * in its current state the final value of w should be 5 
*/

float train[][2] = {
	{0,0},
	{1,5},
	{2,10},
	{3,15},
	{4,20},
};

#define train_count (sizeof(train)/sizeof(train[0]))

// Produces a random float value between 0.0 and 1.0
float rand_float(void) {
	return (float) rand() / (float) RAND_MAX;
}

/*
 * input w: The weight value, used to evaluate fit
 * retrieve input value of x for the ith example
 * predict output using linear model: y = x * w
 * calculate error being the difference between the prediction and target value
 * square error to penalize large deviations
 * return average error per data point using the sum of squared errors: (result / train_count)
 */
 
float cost(float w) {
	float result = 0.0f;
	for (size_t i = 0; i < train_count; ++i) {
		float x = train[i][0];
		float y = x*w;
		float d = y - train[i][1];
		result += d*d;
	}

	result /= train_count;
	return result;
}

int main()
{

	srand(time(0));
	float w = rand_float() * 10.0f; //random initialization of weight
	float eps = 1e-3; // small val used to estimate gradient
	float rate = 1e-3; // small val used to control weights update rate
	printf("Intial Cost = %f\n", cost(w)); // initial cost calculation
	printf("----------------------------------------------------------------------\n");
	
	for(size_t i = 0; i < 500; ++i){
	        float dcost = (cost(w + eps) - cost(w)) / eps; // the gradient approximation
	    	w -= rate * dcost; // changes weight by moving in the direction that reduces the cost
	    	// used to show progress every 20 iterations
	    	if(i%20 == 0){
	            printf("cost = %f, w = %f\n", cost(w), w);
	    	}
	}
	
	printf("----------------------------------------------------------------------\n");
	printf("Final Output =  %f\n", w);

	return 0;
}
