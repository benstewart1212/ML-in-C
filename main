
#include <iostream>
#include <stdio.h>
#include <stdlib.h>
#include <time.h>

// predict some number based on an input number
float train[][2] = {
    {0,0},
    {1,2},
    {2,4},
    {3,6},
    {4,8},
};

#define train_count (sizeof(train)/sizeof(train[0]))

float rand_float(void){
    return (float) rand() / (float) RAND_MAX;
}

float cost(float w){
    float result = 0.0f;
    for (size_t i = 0; i < train_count; ++i){
        float x = train[i][0];
        float y = x*w;
        // track the distance of error
        float d = y - train[i][1];
        result += d*d;
    }

    result /= train_count;
    return result;
}

int main()
{
    
    //srand(time(0));
    srand(69);
    // basic model 
    // y = x * w 
    
    float w = rand_float() * 10.0f;
    
    //shift values closer to goal 
    float eps = 1e-3;
    // use the definition of derivitive to make use of epsilon to have a more accurate prediction
    // better known as the distance of cost
    // def of derivitive = L = lim as h approaches 0  f(a+h) - f(a) / h
    float dcost = (cost(w + eps) - cost(w)) / eps;
    float rate = 1e-3;
    printf("%f\n", cost(w));
    //subtract from w where w is the modifier variable 
    // mathematical expression pulled from Finite Difference
    // also introduce learning rate
    w -= rate * dcost;
    printf("%f\n", cost(w));
    
    return 0;
}
